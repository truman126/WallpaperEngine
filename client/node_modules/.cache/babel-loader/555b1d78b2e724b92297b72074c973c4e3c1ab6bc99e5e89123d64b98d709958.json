{"ast":null,"code":"var _jsxFileName = \"/Users/truman/Projects/wallpaperengine/client/src/components/FileUploader.jsx\";\nimport { ChangeEvent, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FileUploader() {\n  const [fileList, setFileList] = useState < FileList | null > null;\n  const handleFileChange = e => {\n    setFileList(e.target.files);\n  };\n  const handleUploadClick = () => {\n    if (!fileList) {\n      return;\n    }\n\n    // ðŸ‘‡ Create new FormData object and append files\n    const data = new FormData();\n    files.forEach((file, i) => {\n      data.append(`file-${i}`, file, file.name);\n    });\n\n    // ðŸ‘‡ Uploading the files using the fetch API to the server\n    fetch('https://httpbin.org/post', {\n      method: 'POST',\n      body: data\n    }).then(res => res.json()).then(data => console.log(data)).catch(err => console.error(err));\n  };\n\n  // ðŸ‘‡ files is not an array, but it's iterable, spread to get an array of files\n  const files = fileList ? [...fileList] : [];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileChange,\n      multiple: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: files.map((file, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [file.name, \" - \", file.type]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUploadClick,\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_c = FileUploader;\nexport default FileUploader;\nvar _c;\n$RefreshReg$(_c, \"FileUploader\");","map":{"version":3,"names":["ChangeEvent","useState","jsxDEV","_jsxDEV","FileUploader","fileList","setFileList","FileList","handleFileChange","e","target","files","handleUploadClick","data","FormData","forEach","file","i","append","name","fetch","method","body","then","res","json","console","log","catch","err","error","children","type","onChange","multiple","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","_c","$RefreshReg$"],"sources":["/Users/truman/Projects/wallpaperengine/client/src/components/FileUploader.jsx"],"sourcesContent":["import { ChangeEvent, useState } from 'react';\n\n\nfunction FileUploader() {\n  const [fileList, setFileList] = useState<FileList | null>(null);\n\n  const handleFileChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setFileList(e.target.files);\n  };\n\n  const handleUploadClick = () => {\n    if (!fileList) {\n      return;\n    }\n\n    // ðŸ‘‡ Create new FormData object and append files\n    const data = new FormData();\n    files.forEach((file, i) => {\n      data.append(`file-${i}`, file, file.name);\n    });\n\n    // ðŸ‘‡ Uploading the files using the fetch API to the server\n    fetch('https://httpbin.org/post', {\n      method: 'POST',\n      body: data,\n    })\n      .then((res) => res.json())\n      .then((data) => console.log(data))\n      .catch((err) => console.error(err));\n  };\n\n  // ðŸ‘‡ files is not an array, but it's iterable, spread to get an array of files\n  const files = fileList ? [...fileList] : [];\n\n  return (\n    <div>\n      <input type=\"file\" onChange={handleFileChange} multiple />\n\n      <ul>\n        {files.map((file, i) => (\n          <li key={i}>\n            {file.name} - {file.type}\n          </li>\n        ))}\n      </ul>\n\n      <button onClick={handleUploadClick}>Upload</button>\n    </div>\n  );\n}\n\nexport default FileUploader;"],"mappings":";AAAA,SAASA,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG9C,SAASC,YAAYA,CAAA,EAAG;EACtB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGL,QAAQ,GAACM,QAAQ,GAAG,IAAI,GAAE,IAAK;EAE/D,MAAMC,gBAAgB,GAAIC,CAAgC,IAAK;IAC7DH,WAAW,CAACG,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC7B,CAAC;EAED,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,IAAI,CAACP,QAAQ,EAAE;MACb;IACF;;IAEA;IACA,MAAMQ,IAAI,GAAG,IAAIC,QAAQ,EAAE;IAC3BH,KAAK,CAACI,OAAO,CAAC,CAACC,IAAI,EAAEC,CAAC,KAAK;MACzBJ,IAAI,CAACK,MAAM,CAAE,QAAOD,CAAE,EAAC,EAAED,IAAI,EAAEA,IAAI,CAACG,IAAI,CAAC;IAC3C,CAAC,CAAC;;IAEF;IACAC,KAAK,CAAC,0BAA0B,EAAE;MAChCC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAET;IACR,CAAC,CAAC,CACCU,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,EAAE,CAAC,CACzBF,IAAI,CAAEV,IAAI,IAAKa,OAAO,CAACC,GAAG,CAACd,IAAI,CAAC,CAAC,CACjCe,KAAK,CAAEC,GAAG,IAAKH,OAAO,CAACI,KAAK,CAACD,GAAG,CAAC,CAAC;EACvC,CAAC;;EAED;EACA,MAAMlB,KAAK,GAAGN,QAAQ,GAAG,CAAC,GAAGA,QAAQ,CAAC,GAAG,EAAE;EAE3C,oBACEF,OAAA;IAAA4B,QAAA,gBACE5B,OAAA;MAAO6B,IAAI,EAAC,MAAM;MAACC,QAAQ,EAAEzB,gBAAiB;MAAC0B,QAAQ;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eAE1DnC,OAAA;MAAA4B,QAAA,EACGpB,KAAK,CAAC4B,GAAG,CAAC,CAACvB,IAAI,EAAEC,CAAC,kBACjBd,OAAA;QAAA4B,QAAA,GACGf,IAAI,CAACG,IAAI,EAAC,KAAG,EAACH,IAAI,CAACgB,IAAI;MAAA,GADjBf,CAAC;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAGX;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACC,eAELnC,OAAA;MAAQqC,OAAO,EAAE5B,iBAAkB;MAAAmB,QAAA,EAAC;IAAM;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAC/C;AAEV;AAACG,EAAA,GA9CQrC,YAAY;AAgDrB,eAAeA,YAAY;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}