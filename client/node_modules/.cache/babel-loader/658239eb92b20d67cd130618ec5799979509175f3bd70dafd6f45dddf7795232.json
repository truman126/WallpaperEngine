{"ast":null,"code":"var _jsxFileName = \"/Users/truman/Projects/wallpaperengine/client/src/components/FileUploader.jsx\";\nimport { ChangeEvent, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FileUploader() {\n  //   const [fileList, setFileList] = useState<FileList | null>(null);\n\n  const handleFileChange = e => {\n    // setFileList(e.target.files);\n  };\n  const handleUploadClick = () => {\n    if (!fileList) {\n      return;\n    }\n\n    // ðŸ‘‡ Create new FormData object and append files\n    const data = new FormData();\n    files.forEach((file, i) => {\n      data.append(`file-${i}`, file, file.name);\n    });\n\n    //     // ðŸ‘‡ Uploading the files using the fetch API to the server\n    //     fetch('https://httpbin.org/post', {\n    //       method: 'POST',\n    //       body: data,\n    //     })\n    //       .then((res) => res.json())\n    //       .then((data) => console.log(data))\n    //       .catch((err) => console.error(err));\n  };\n\n  //   // ðŸ‘‡ files is not an array, but it's iterable, spread to get an array of files\n  const files = fileList ? [...fileList] : [];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      multiple: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: files.map((file, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [file.name, \" - \", file.type]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUploadClick,\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_c = FileUploader;\nexport default FileUploader;\nvar _c;\n$RefreshReg$(_c, \"FileUploader\");","map":{"version":3,"names":["ChangeEvent","useState","jsxDEV","_jsxDEV","FileUploader","handleFileChange","e","handleUploadClick","fileList","data","FormData","files","forEach","file","i","append","name","children","type","multiple","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","_c","$RefreshReg$"],"sources":["/Users/truman/Projects/wallpaperengine/client/src/components/FileUploader.jsx"],"sourcesContent":["import { ChangeEvent, useState } from 'react';\n\n\nfunction FileUploader() {\n//   const [fileList, setFileList] = useState<FileList | null>(null);\n\n  const handleFileChange = (e) => {\n    // setFileList(e.target.files);\n  };\n\n  const handleUploadClick = () => {\n    if (!fileList) {\n      return;\n    }\n\n    // ðŸ‘‡ Create new FormData object and append files\n    const data = new FormData();\n    files.forEach((file, i) => {\n      data.append(`file-${i}`, file, file.name);\n    });\n\n//     // ðŸ‘‡ Uploading the files using the fetch API to the server\n//     fetch('https://httpbin.org/post', {\n//       method: 'POST',\n//       body: data,\n//     })\n//       .then((res) => res.json())\n//       .then((data) => console.log(data))\n//       .catch((err) => console.error(err));\n };\n\n//   // ðŸ‘‡ files is not an array, but it's iterable, spread to get an array of files\n  const files = fileList ? [...fileList] : [];\n\n  return (\n    <div>\n      <input type=\"file\" multiple />\n\n      <ul>\n        {files.map((file, i) => (\n          <li key={i}>\n            {file.name} - {file.type}\n          </li>\n        ))}\n      </ul>\n\n      <button onClick={handleUploadClick}>Upload</button>\n    </div>\n  );\n}\n\nexport default FileUploader;"],"mappings":";AAAA,SAASA,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG9C,SAASC,YAAYA,CAAA,EAAG;EACxB;;EAEE,MAAMC,gBAAgB,GAAIC,CAAC,IAAK;IAC9B;EAAA,CACD;EAED,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,IAAI,CAACC,QAAQ,EAAE;MACb;IACF;;IAEA;IACA,MAAMC,IAAI,GAAG,IAAIC,QAAQ,EAAE;IAC3BC,KAAK,CAACC,OAAO,CAAC,CAACC,IAAI,EAAEC,CAAC,KAAK;MACzBL,IAAI,CAACM,MAAM,CAAE,QAAOD,CAAE,EAAC,EAAED,IAAI,EAAEA,IAAI,CAACG,IAAI,CAAC;IAC3C,CAAC,CAAC;;IAEN;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACC,CAAC;;EAEF;EACE,MAAML,KAAK,GAAGH,QAAQ,GAAG,CAAC,GAAGA,QAAQ,CAAC,GAAG,EAAE;EAE3C,oBACEL,OAAA;IAAAc,QAAA,gBACEd,OAAA;MAAOe,IAAI,EAAC,MAAM;MAACC,QAAQ;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eAE9BpB,OAAA;MAAAc,QAAA,EACGN,KAAK,CAACa,GAAG,CAAC,CAACX,IAAI,EAAEC,CAAC,kBACjBX,OAAA;QAAAc,QAAA,GACGJ,IAAI,CAACG,IAAI,EAAC,KAAG,EAACH,IAAI,CAACK,IAAI;MAAA,GADjBJ,CAAC;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAGX;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACC,eAELpB,OAAA;MAAQsB,OAAO,EAAElB,iBAAkB;MAAAU,QAAA,EAAC;IAAM;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAC/C;AAEV;AAACG,EAAA,GA9CQtB,YAAY;AAgDrB,eAAeA,YAAY;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}